FORMAT: 1A
HOST: https://api.dap-services.com/2

# DAP Services a.s. API, version 2

Daps API version 2.

## Allowed HTTPs requests:

- `POST` - Creates or updates a resource
- `PUT` - Updates a resource
- `GET` - Retrieves a resource or list of resources
- `DELETE` - Delete a resource

## Typical Server Responses

- 200 `OK` - The request was successful (some API calls may return 201 instead).
- 201 `Created` - The request was successful and a resource was created.
- 204 `No Content` - The request was successful but there is no representation to return (that is, the response is empty).
- 400 `Bad Request` - The request could not be understood or was missing required parameters.
- 401 `Unauthorized` - Authentication failed or user does not have permissions for the requested operation.
- 403 `Forbidden` - Access denied.
- 404 `Not Found` - Resource was not found.
- 405 `Method Not Allowed` - Requested method is not supported for the specified resource.
- 429 `Too Many Requests` - Exceeded API limits. Pause requests, wait one minute, and try again.
- 503 `Service Unavailable` - The service is temporary unavailable. Try again later.

> Time is unix_time plus ms (http://www.epochconverter.com).

# Group Account

User account.

## Login [/account/login]

### User login [POST]

Login uses Basic access authentication (http://en.wikipedia.org/wiki/Basic_access_authentication). Example:

> Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

If user is logged in, API sends json with authentication token.

> Token has limited validity. When user received http status `401` (Unauthorized), he has to login again.

#### Token in http header

Every API call requires authorization token in `Authorization` http header. Example:

> Authorization: AuthSub token="token"

+ Request

    + Headers

            Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==

+ Response 200 (application/json)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {"token":"40287ee649518e890149577d1524000sda2112123"}

+ Response 401 (application/json)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

# Group Scanning

Zdroje a operace pro snímání osob.

## Work with scan object [/scan_object]

### Get scanObject by Formula object and optional filters [POST]

#### Request description

- formula_object_ids - set of formula object ids. Type `ARRAY`, id type is `NUMBER` (required).
- languages - set of input languages in ISO 639-1 format. Type `ARRAY`, id type is `String`. (optional)<br />
 <i>Note: result of this option could be more labels in requested language</i> 
- scan_module_ids - set of scan module ids. Enable to find formula object label by existing scan module and guarantee unique label for each formula object. Type `ARRAY`, id type is `NUMBER` (optional).


#### Response description

- this resource returns `ARRAY` of filtered scan objects.

+ Request (application/json)

    + Headers

            Authorization: AuthSub token="token"
            Accept: application/json

    + Body

            {
                "formula_object_ids": [1],
                "languages": ["cs","en"],
                "scan_module_ids": [123,124]
            }

+ Response 200 (application/json)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

             [
                      {
                        "label": "Já",
                        "object_type": "WORD",
                        "lang_code": "cs",
                        "scan_object_id": 100,
                        "formula_object_id": 1
                      },
                      {
                        "label": "I",
                        "object_type": "WORD",
                        "lang_code": "en",
                        "scan_object_id": 101,
                        "formula_object_id": 1
                      },
                      {
                        "label": "Me",
                        "object_type": "WORD",
                        "lang_code": "en",
                        "scan_object_id": 102,
                        "formula_object_id": 1
                      }
            ]

+ Response 400 (Bad Request)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            // in dependency of error category 
            {
                "error": {
                    "message": "Error message.",
                    "error_code": "error.code.badRequest"
                }
            }
            

+ Response 401 (Unauthorized)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "error": {
                    "message": "Authentication error message.",
                    "error_code": "error.code.authorization"
                }
            }
            
            

### Create scan object [PUT]

Creates or loads scan object and returns it with id.
Multimedia objects are supported.
It's secured resource, it's necessary to be logged and have permissions.

#### Request description

- label - name of scan object. In case of type WORD, this is the word. Mandatory.
- object_type - type of scan object. Mandatory. Values: COLOR, WORD, PICTURE, SOUND, VIDEO
- lang_code - ISO 639-1 kód jazyka. Mandatory.
- uri - link to multimedia. Mandatory for object types: PICTURE, SOUND, VIDEO
- crc - check sum of multimedia. Mandatory for object types: PICTURE, SOUND, VIDEO
- types - object additional information. Mandatory for object type: COLOR

#### Response description

- id - unique id of scan object.
- label - name of scan object. In case of type WORD, this is the word. Mandatory.
- object_type - type of scan object. Mandatory. Options: COLOR, WORD, PICTURE, SOUND, VIDEO
- lang_code - ISO 639-1 kód jazyka. Mandatory.
- uri - link to multimedia. Mandatory for object type: PICTURE, SOUND, VIDEO
- crc - check sum of multimedia. Mandatory for object type: PICTURE, SOUND, VIDEO
- types - object additional information. Mandatory for object type: COLOR

+ Request (application/json)

    + Headers

            Authorization: AuthSub token="token"
            Accept: application/json

    + Body

            {
                "label": "IT",
                "object_type": "WORD",
                "lang_code": "en"
            }
            or:
            {
                "label": "IT",
                "object_type": "PICTURE",
                "lang_code": "en",
                "uri": "http://example.com/picture.png",
                "crc": "56sdg516as465f"
            }

+ Response 200 (application/json)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "id": 9
                "label": "IT",
                "object_type": "WORD",
                "lang_code": "en"
            }
            or:
            {
                "id": 10
                "label": "IT",
                "object_type": "WORD",
                "lang_code": "en",
                "uri": "http://example.com/picture.png",
                "crc": "56sdg516as465f"
            }

+ Response 400 (Bad Request)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "error": {
                    "message": "Error message.",
                    "error_code": "error.code.badRequest"
                }
            }
            

+ Response 401 (Unauthorized)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "error": {
                    "message": "Authentication error message.",
                    "error_code": "error.code.authorization"
                }
            }


## Work with formula object [/formula_object/add_scan_object]

### Assign scan object to formula object [PUT]

Assign exist scan object to exist formula object.
It's secured resource, it's necessary to be logged and have permissions.

#### Request description

- formula_object_id - id of formula object
- scan_object_id - id of scan object

#### Response description

Response have empty body.

+ Request (application/json)

    + Headers

            Authorization: AuthSub token="token"
            Accept: application/json

    + Body

                {
                    "formula_object_id": 2,
                    "scan_object_id": 1
                }

+ Response 200

+ Response 400 (Bad Request)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "message": "Cannot parse input Json string. Json string is not valid.",
                "content": "{'scan_object_id': '1', 'formula_object_id': '2'}"
            }

+ Response 401 (Unauthorized)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "message": "Authorization header was empty"
            }

+ Response 403 (Forbidden)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "message": "You do not have permission."
            }


## Práce s kolekcemi scan objektů [/scan_object/collection]

### Získání informací o kolekci scan objektů [POST]

Vytvoří nebo načte již existující scan objecty a vrátí je s doplněným id.
Nepodporuje multimediální objekty. V

#### Request description

- label - název scan objektu. V případě slovo se jedná o slovo samotné.
- object_type - typ scan objektu. Možnosti: WORD.
- lang_code - ISO 639-1 kód jazyka.

#### Response description

Výstupní kolekce má stejné pořadí a stejný počet prvků, jako má vstupní kolekce. V případě, že vstup obsahuje stejné slova v různých variantách (Me, me, mE, ME), jsou vráceny všechny zpět s jedním id a stejným label (původní label je v atributu original_label).

- label - DAPs varianta slova, pokud již toto slovo v databázi máme. Jinak obsahuje vstupní label.
- original_label - původní label.
- object_type - typ scan objektu. Možnosti: WORD.
- lang_code - ISO 639-1 kód jazyka.
- id - jedinečné id scan objektu.

+ Request (application/json)

    + Headers

            Authorization: AuthSub token="token"
            Accept: application/json

    + Body

                [
                    {
                        "label": "IT",
                        "object_type": "WORD",
                        "lang_code": "en"
                    },
                    {
                        "label": "Projekt",
                        "object_type": "WORD",
                        "lang_code": "en"
                    }
                ]

+ Response 200 (application/json)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            [
                {
                    "label": "iT",
                    "daps_label": "IT",
                    "object_type": "WORD",
                    "lang_code": "en",
                    "id": 1
                },
                {
                    "label": "projekt",
                    "label": "Projekt",
                    "object_type": "WORD",
                    "lang_code": "en",
                    "id": 2
                }
            ]

+ Response 400 (Bad Request)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "error": {
                    "message": "Chybové hlášení pro nevalidní požadavek.",
                    "error_code": "error.code.badRequest"
                }
            }

+ Response 401 (Unauthorized)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "error": {
                    "message": "Chybové hlášení pro autentizaci.",
                    "error_code": "error.code.authorization"
                }
            }

## Scan [/scan]

### Vytváření snímání [POST]

Seznam client_data_key:

| id | Jméno                             |
|----|-----------------------------------|
| 1  | Jméno                             |
| 2  | Příjmení                          |
| 3  | Datum narození (rok narození)     |
| 4  | Vzdělání                          |
| 5  | Obec                              |
| 6  | Email                             |
| 7  | Důvod snímání                     |
| 8  | Pohlaví                           |
| 9  | Skupina                           |
| 10 | Věk                               |
| 11 | Pracovní pozice                   |
| 12 | Id snímané osoby                  |
| 13 | Id zodpovědné osoby               |
| 14 | Společnost                        |
| 15 | Language code - ISO 639-1         |
| 16 | Country code - ISO ALPHA-3 code   |
| 17 | Externí Id skupiny snímků         |
| 18 | Volitelná položka od klienta      |
| 29 | Diagnostics UUID                  |
| 30 | Diagnosics device info            |

Popis atributů pro požadavek

- name, description - název, popis snímání
- state - stav snímání, kombinace ACTIVE, CLOSED, TEST konstant (oddělení čárkou)
- scan_area_id - zaměření snímání. Možnosti
    - 1 - evaluace škol
    - 3 - komeční snímání (základ je 86tka)
- module_type_id - verze slovního modulu (odlišnost základních slov)
- scan_module_id - id odpovídajícího slovního modulu
- scan_mask - maska snímání ve snímači, může být **null**
    - label - text zobrazený ve snímači
    - editable - true | false
    - order - pořadí na obrazovce
    - client_data_key - viz výše
    - list_items - možný výčet, zobrazuje se ve formě select prvku

Popis atributů pro výstup

- scan_code - kód do snímače
- id - jedinečný identifikátor snímání

Jakékoliv dotazy na Scan probíhají pomocí scan_code - identifikuje snímání v čase. Není možné mít více snímání se stavem `ACTIVE` a stejným scan_code.

+ Request (application/json)

    + Headers

            Authorization: AuthSub token="token"
            Accept: application/json

    + Body

            {
                "name": "Scan name",
                "description": "Description",
                "state": "ACTIVE|CLOSED|TEST",
                "scan_area_id": "number or enum - jedna se o typ slovniho modulu - ciselnik",
                "scan_module_id": 1,
                "module_type_id": "number or what - jedna se o verzi povinnych slov ~ zakladu",
                "scan_mask": [
                    {
                        "label": "Gender",
                        "editable": false,
                        "order": 1,
                        "client_data_key": 8,
                        "list_items": ["1", "2"]
                    },
                    {
                        "label": "Name",
                        "editable": true,
                        "order": 2,
                        "client_data_key": 1
                    },
                    {
                        "label": "Year of birth",
                        "editable": false,
                        "order": 3,
                        "client_data_key": 3,
                        "number_from": 1993,
                        "number_to": 2008,
                        "number_step": 1,
                        "list_items": ["1993", "1994", "1995", "1996", "1997", "1998"]
                    }
                ]
            }

+ Response 200 (application/json)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "id": 1,
                "scan_code": "scan_code"
            }

+ Response 400 (Bad Request)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "error": {
                    "message": "Chybové hlášení pro nevalidní požadavek.",
                    "error_code": "error.code.badRequest"
                }
            }

+ Response 401 (Unauthorized)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "error": {
                    "message": "Chybové hlášení pro autentizaci.",
                    "error_code": "error.code.authorization"
                }
            }

## Update parametrů snímání osob [/scan/{scancode}]

### Editace snímání [PUT]

+ Request (application/json)

    + Headers

            Authorization: AuthSub token="token"
            Accept: application/json

    + Body

            {
                "name": "Scan name",
                "description": "Description",
                "state": "ACTIVE|CLOSED|TEST",
                "scan_mask": [
                    {
                        "label": "Gender",
                        "editable": false,
                        "order": 1,
                        "client_data_key": 8,
                        "list_items": ["1", "2"]
                    },
                    {
                        "label": "Name",
                        "editable": true,
                        "order": 2,
                        "client_data_key": 1
                    },
                    {
                        "label": "Year of birth",
                        "editable": false,
                        "order": 3,
                        "client_data_key": 3,
                        "number_from": 1993,
                        "number_to": 2008,
                        "number_step": 1,
                        "list_items": ["1993", "1994", "1995", "1996", "1997", "1998"]
                    }
                ]
            }

+ Response 200 (application/json)

    + Headers

            Access-Control-Allow-Origin: *


+ Response 400 (Bad Request)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "error": {
                    "message": "Chybové hlášení pro nevalidní požadavek.",
                    "error_code": "error.code.badRequest"
                }
            }

+ Response 401 (Unauthorized)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "error": {
                    "message": "Chybové hlášení pro autentizaci.",
                    "error_code": "error.code.authorization"
                }
            }



## Informace o snímání [/scan/{scan_code}]

### Získání informací [GET]

Popis atributů pro výstup viz resource scan [POST]

+ Request (application/json)

    + Headers

            Authorization: AuthSub token="token"
            Accept: application/json

+ Response 200 (application/json)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "id": 1,
                "scan_code": "scan_code",
                "name": "Scan name",
                "description": "Description",
                "state": "ACTIVE",
                "scan_area_id": 1,
                "scan_module_id": 1,
                "module_type_id": 1,
                "insert_time": "1412840432000",
                "scan_mask": [
                    {
                        "label": "Gender",
                        "editable": false,
                        "order": 1,
                        "client_data_key": 8,
                        "list_items": ["1", "2"]
                    },
                    {
                        "label": "Name",
                        "editable": true,
                        "order": 2,
                        "client_data_key": 1
                    },
                    {
                        "label": "Year of birth",
                        "editable": false,
                        "order": 3,
                        "client_data_key": 3,
                        "number_from": 1993,
                        "number_to": 2008,
                        "number_step": 1,
                        "list_items": ["1993", "1994", "1995", "1996", "1997"]
                    }
                ]
            }

+ Response 400 (Bad Request)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "error": {
                    "message": "Chybové hlášení pro nevalidní požadavek.",
                    "error_code": "error.code.badRequest"
                }
            }

+ Response 401 (Unauthorized)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "error": {
                    "message": "Chybové hlášení pro autentizaci.",
                    "error_code": "error.code.authorization"
                }

## Informace o nasnímaných osobách [/scan/{scan_code}/scan_data]


### Získání seznamu nasnímaných osob [GET]

Popis atributů pro výstup:

- client_data: 8 (pohlaví) je číselník: MALE = muž, FEMALE = žena.

+ Request (application/json)

    + Headers

            Authorization: AuthSub token="token"
            Accept: application/json

+ Response 200 (application/json)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            [
                {
                    "id": 1,
                    "module_type_id": 1,
                    "affected": true,
                    "insert_time": "1412840432000",
                    "client_data": {
                        "8": "MALE",
                        "1": "Jan",
                        "2": "Novák",
                        "3": "1986",
                        "9": "Department 1",
                        "18": "Item 1",
                        "10": "28"
                        }
                },
                {
                    "id": 2,
                    "module_type_id": 1,
                    "affected": false,
                    "insert_time": "1412840432000",
                    "client_data": {
                        "8": "MALE",
                        "1": "Jan",
                        "2": "Doe",
                        "3": "1987",
                        "9": "Department 2",
                        "18": "Item 1",
                        "10": "27"
                        }
                },
                {
                    "id": 3,
                    "module_type_id": 1,
                    "affected": false,
                    "insert_time": "1412840432000",
                    "client_data": {
                        "8": "FEMALE",
                        "1": "Jana",
                        "2": "Doe",
                        "3": "1987",
                        "9": "Department 3",
                        "18": "Item 1",
                        "10": "27"
                    }
                },
                {
                    "id": 4,
                    "module_type_id": 1,
                    "affected": false,
                    "insert_time": "1412840432000",
                    "client_data": {
                        "8": "FEMALE",
                        "1": "Jana",
                        "2": "Nováková",
                        "3": "1986",
                        "9": "Department 1",
                        "18": "Item 1",
                        "10": "26"
                    }
                },
                {
                    "id": 5,
                    "module_type_id": 1,
                    "affected": false,
                    "insert_time": "1412840432000",
                    "client_data": {
                        "8": "MALE",
                        "1": "John",
                        "2": "Novak",
                        "3": "1986",
                        "9": "Department 2",
                        "18": "Item 1",
                        "10": "26"
                    }
                },
                {
                    "id": 6,
                    "module_type_id": 1,
                    "affected": false,
                    "insert_time": "1412840432000",
                    "client_data": {
                        "8": "FEMALE",
                        "1": "Evelyn",
                        "2": "Novak",
                        "3": "1986",
                        "9": "Department 3",
                        "18": "Item 1",
                        "10": "26"
                    }
                },
                {
                    "id": 7,
                    "module_type_id": 1,
                    "affected": true,
                    "insert_time": "1412840432000",
                    "client_data": {
                        "8": "MALE",
                        "1": "Ruppert",
                        "2": "Everet",
                        "3": "1986",
                        "9": "Department 1",
                        "18": "Item 1",
                        "10": "26"
                    }
                },
                {
                    "id": 8,
                    "module_type_id": 1,
                    "affected": false,
                    "insert_time": "1412840432000",
                    "client_data": {
                        "8": "FEMALE",
                        "1": "Hana",
                        "2": "Muscular",
                        "3": "1986",
                        "9": "Department 1",
                        "18": "Item 1",
                        "10": "26"
                    }
                },
                {
                    "id": 9,
                    "module_type_id": 1,
                    "affected": false,
                    "insert_time": "1412840432000",
                    "client_data": {
                        "8": "MALE",
                        "1": "Daniel",
                        "2": "Architect",
                        "3": "1986",
                        "9": "Department 2",
                        "18": "Item 1",
                        "10": "26"
                    }
                }
            ]

+ Response 400 (Bad Request)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "error": {
                    "message": "Chybové hlášení pro nevalidní požadavek.",
                    "error_code": "error.code.badRequest"
                }
            }

+ Response 401 (Unauthorized)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "error": {
                    "message": "Chybové hlášení pro autentizaci.",
                    "error_code": "error.code.authorization"
                }
            }


## Scan Module [/scan_module]

### Create module [POST]

This request creates new module for Scan. Order of elements in scan_objects array defines order of objects in diagnostics. Now supported only text objects.

#### Request description

- name (`required`) - Type `String`. Attribut defines module name.
- description (`required`) - Type `String`. Attribut defines module description.
- scan_objects - Type `Array`. Values are `Objects`. Each of objects represents Scan Object with this attributes:
    - label (`required`)- scan object text representation. In a case of word the word itself
    - object_type (`default WORD`) - type of scan object. e.g. [WORD | PICTURE]
    - lang_code (`required`) - ISO 639-1 language code
    - order (`required`) - order of object in module

#### Response description

- scan_module (`Number`) - new scan module id.

+ Request (application/json)

    + Headers

            Authorization: AuthSub token="token"
            Accept: application/json

    + Body

            {
                "name": "My module",
                "description": "My module purposes",
                "scan_objects": [
                {
                  "label": "Myself",
                  "lang_code": "en",
                  "order": 1
                },
                {
                  "label": "My work",
                  "lang_code": "en",
                  "order": 2
                },
                {
                  "label": "My psyche",
                  "lang_code": "en",
                  "order": 3
                },
                {
                  "label": "My fault",
                  "lang_code": "en",
                  "order": 4
                }
              ]
            }

+ Response 200 (application/json)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
              "scan_module": 100
            }

## Scan Module [/scan_module/{module_id}]

### Get module [GET]

This request returns module definition by identificator. The request is authorized.

#### Request description

- module_id (`required`) - ID of scan module. You obtain this value from DAP Services a.s.

#### Response description

- id - identificator of the scan module
- name - name of the scan module
- description - description of the scan module
- scan_objects - list of module scan objects.
    - label - scan objects label
    - id - identificator of the scan object
    - order - order of the scan object in module
    - object_type - enumeration, type of scan object [WORD|PICTURE|etc.]
    - lang_code - language code

If scan module doesn't exist or you have not permission to scan module you will recieve response 400 (Bad request).

+ Request (application/json)

    + Headers

            Authorization: AuthSub token="token"

+ Response 200 (application/json)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "id": 558,
                "name": "Sportimind - Energie CZ",
                "description": "Sportimind - Energie CZ",
                "scan_objects": [
                    {
                        "label": "Trestám",
                        "id": 21761,
                        "order": 1,
                        "object_type": "WORD",
                        "lang_code": "cs"
                    },
                    {
                        "label": "Lidé",
                        "id": 21821,
                        "order": 2,
                        "object_type": "WORD",
                        "lang_code": "cs"
                    },
                    {
                        "label": "Moje psychika",
                        "id": 21271,
                        "order": 3,
                        "object_type": "WORD",
                        "lang_code": "cs"
                    }
                ]
            }

+ Response 400 (application/json)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "message": "Module not found.",
                "moduleId": 559
            }


## Collector [/collector/get]
<a name="collector"></a>

Saves diagnostics data from scanner.

### Save diagnostics data. [POST]

For saving data from diagnostics tool you can select XML or JSON format. XML format is now deprecated.

**JSON Request description**
+ client_data (Array) - mandatory. Array of identifications of diagnosed person. You will obtain client_data_ids from DAP Services. Mandatory are gender (id 8) and age (id 10). See example for detail.
+ scan_id (Long) - this item is mandatory and identify group of diagnosed people. You can have one or more of this ids. You obtain this id(s) from DAP Services.
+ begin_time  (String) - mandatory, an ISO8601 time representing start of scanning process. Format of ISO String is YYYY-MM-DDThh:mm:ss.sssTZD (eg. 2013-07-01T10:00:00.125-04:00). See http://en.wikipedia.org/wiki/ISO_8601 for details.
+ end_time (String) - mandatory, end of scanning process. Time is in the ISO8601 format.
+ module_type_id (Long) - mandatory, if it will be necessary you obtain this id from DAP Services with rules how to use it.
+ selections (Array) - mandatory, the participant's choices.
+ scan_object_id (Long) - mandatory, id of the central object. You obtain all ids from DAP Services.
+ selections in selections section (Array) - mandatory. Color selections to particular object.
+ begin_time (String) - mandatory. Time when you are starting choosing the first color. Time is in the ISO8601 format.
+ end_time (String) - mandatory. Time when you already chose the last color and you click on "Continue" button. Time is in the ISO8601 format.
+ color_id (Integer) - mandatory. Id of the color the participant chose. You will obtain the set of ids from DAP Services.
+ hit (Boolean) - mandatory. If ball was hit, then true. If not, then miss_distance field is required.
+ miss_distance (Long) - if user did not hit the ball, we need distance from nearest ball in pixels.
+ exact_color_hex (String) - exact color under pointer. Example: 030361ff.
+ back_button (Boolean) - if Back button was used.
+ selection_time (String) - mandatory. Time when the participant chose the color. Time is in the ISO8601 format.

**XML Response description**

- status - success | error.
- id - diagnostics unique id.
- hash - diagnostics unique hash.

+ Request XML deprecated (text/xml)

    + Headers

            Accept: text/xml

    + Body

+ Request JSON (application/json)

    + Headers

            Accept: application/json

    + Body

            {
                "client_data": [
                    {
                        "client_data_id": 8,
                        "value": "MALE"
                    },
                    {
                        "client_data_id": 10,
                        "value": "33"
                    },
                    {
                        "client_data_id": 15,
                        "value": "155, 156, 157, 158"
                    }
                ],
                "scan_id": 123456,
                "begin_time": "2013-07-01T10:00:00.125-04:00",
                "end_time": "2013-07-01T10:05:00.125-04:00",
                "module_type_id": 1,
                "selections": [
                    {
                        "scan_object_id": 1234,
                        "selections": {
                            "begin_time": "2013-07-01T10:00:10.125-04:00",
                            "end_time": "2013-07-01T10:01:00.125-04:00",
                            "choices": [
                                {
                                    "color_id": 1,
                                    "hit": true,
                                    "exact_color_hex": "037a03ff",
                                    "selection_time": "2013-07-01T10:00:20.125-04:00"
                                },
                                {
                                    "color_id": 2,
                                    "hit": true,
                                    "exact_color_hex": "660066ff",
                                    "selection_time": "2013-07-01T10:00:30.125-04:00"
                                },
                                {
                                    "color_id": 4,
                                    "hit": false,
                                    "miss_distance": 1,
                                    "selection_time": "2013-07-01T10:00:40.125-04:00"
                                },
                                {
                                    "color_id": 3,
                                    "hit": true,
                                    "exact_color_hex": "0304b0ff",
                                    "back_button": false,
                                    "selection_time": "2013-07-01T10:00:40.125-04:00"
                                }
                            ]
                        }
                    }
                ]
            }

+ Response 200 (text/xml)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            <?xml version="1.0" encoding="UTF-8"?>
            <scandata>
                <status>success</status>
                <id>1</id>
                <hash>e6e68c849d638df6bd271da3012f623842941f91</hash>
            </scandata>

+ Response 400 (text/xml)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            <?xml version="1.0" encoding="UTF-8"?>
            <scandata>
                <status>error</status>
            </scandata>

+ Response 200 (application/json)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "status": "success",
                "id": 10223,
                "hash": "e6e68c849d638df6bd271da3012f623842941f91"
            }

+ Response 400 (application/json)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "status": "error",
                "message": "Request content is not in valid JSON format.",
                "code": 47586
            }
        
# Group Result

## Generování výstupů [/result/{id}/generate]

### POST

#### Popis atributů pro výstup

- data - výstup přenášený pomocí base64. Typ výstupu je určen v atributu mime_type.

+ Request (application/json)

    + Headers

            Authorization: AuthSub token="token"
            Accept: application/json

    + Body

            {"scan_data_ids": [1, 2, 3]}

+ Response 200 (application/json)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {"data": "REFQIFNlcnZpY2VzIGEucy4gQVBJIHJlc3VsdCAtIHR4dAoK", "mime_type": "text/plain"}

+ Response 400 (Bad Request)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "error": {
                    "message": "Chybové hlášení pro nevalidní požadavek.",
                    "error_code": "error.code.badRequest"
                }
            }

+ Response 401 (Unauthorized)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "error": {
                    "message": "Chybové hlášení pro autentizaci.",
                    "error_code": "error.code.authorization"
                }
            }
            
# Group Diagnostics

When you wants to use html diagnostics you have to create configuration and save it to DAPS Api. 
With uuid which you obtain from response you can go on html diagnostics.

## Save configuration of diagnostics [/diagnostics]


Configuration of diagnostics (json, which is in request) is saved to filesystem 
as uuid.json and this uuid is returned back.
This uuid is used in the url of html diagnostics. 


### Save configuration of diagnostics [POST]

For saving configuration use JSON format. 

The description is also in json schema (next to Body on the right side - show jsons schema)

**JSON Request description**
+ **scan_id** (String) - `required` this item identify group of diagnosed people. You can have one or more of this ids. You obtain this id(s) from DAP Services.
+ **client_data** (Map) - `required` Array of identifications of diagnosed person. You will obtain client_data_ids from DAP Services. Mandatory are gender (id 8) and age (id 10). See example for detail.
+ **locale** (String) - `required` language of diagnostics eg cs_CZ see https://en.wikipedia.org/wiki/Locale_(computer_software)
+ **begin_time** (String) - `required` start time when client started to fill mask
+ **collector** (String) - `required` which database from DAP Services will be used - allowed value is model1 or model3
+ **scan_module** (Array) - ([**_read about required_**](#module)) array of Scan object. 
> **Scan object** has these attributes:
> + **object_id** (Integer) - (required) identificator of scan object
> + **object_type** (String) - (required) acceptable type of scan object [WORD, COLOR]
> + **object_label** (String) -(required when type is WORD) when is scan object text representation
> + **order** (Integer) - order when is displayed scanObject
+ **scan_module_id** (Long) - ([**_read about required_**](#module)) id of scan module
+ **module_type_id** (Long) - you obtain this id from DAP Services with rules how to use it.
+ **redirect_url** (String) -  uri in GET format. When is defined, so after finish of diagnostic will be redirect on this url
+ **forwarded_params** (String) - parameters passed to return url - must be urlencoded
+ **redirect_params** (Array) - list of parameters from collector, which should be added as GET parameters to redirect_url, only this enum parametrs [id, hash] is accepted now
+ **exit_url** (String) - when it is defined, so after finish of diagnostics will be displayed thankyou page with button, which will do redirect to this url
+ **exit_url_label** (String) - button label, which is mentioned in exit_url description
+ **rotation_angle** (Double) - see [Rotation rules - variants](#rules)
+ **rotation_count** (String) - see [Rotation rules - variants](#rules) 
+ **display_progressbar** (Boolean) - if will be displayed progressbar in html diagnostics
+ **contact** (Map) - email and phone contact for technical support - will be used in the information message on the page of html diagnostics, when a technical problem arises. (When it is empty, is used contact on technical support of DAP Services a.s.)
    + email (String) - email address for technical support
    + phone (String) - phone number for technical support
+ **test** (Boolean) - if is testing

<a name="module"></a>

            **Configuration has to contains scan_module OR scan_module_id, it is required!**

<a name="rules"></a>    
#### Rotation rules - variants 
- angle: The angle at which the ball rotates.
- count: The number of selections (in number - it is deggree or percent) after which the ball is rotated

        1. variant - angle number, count in percent
        "angle":2, "count":"25%"
    
        2. variant - only count in percent
        "count":"25%"
    
        3. variant - angle in number, count in number
        "angle":2, "count":"1"
    
        4. variant - only count in number
        "count":"1"

+ Request JSON (application/json)
    
    + Headers

            Accept: application/json

    + Body  
    
            {
                "scan_id": "1234",
                "client_data": {
                    "8": "FEMALE",
                    "10": 25,
                    "13": "1. A",
                    "15": "cs",
                    "16": "CZ",
                    "30": {
                        "browser": {
                            "name": "Chrome",
                            "version": "58.0 .3029 .96"
                        },
                        "device": {
                            "model": null,
                            "type": "desktop",
                            "vendor": null
                        },
                        "OS": {
                            "name": "Windows",
                            "version": "7"
                        },
                        "screen": {
                            "width": "800px",
                            "height": "600px",
                            "availWidth": "800px",
                            "availHeight": "600px",
                            "colorDepth": "23 bpp"
                        },
                        "viewport": {
                            "innerWidth": "800px",
                            "innerHeight": "600px",
                            "outerWidth": "600px",
                            "outerHeight": "800px",
                            "clientWidth": "800px",
                            "clientHeight": "600px"
                        },
                        "language": "cs",
                        "user_agent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.96 Safari/537.36",
                        "touch_support": false,
                        "geolocation": {
                            "latitude": 49,
                            "longitude": 18,
                            "accuracy": 2323,
                            "timestamp": "2013-07-01T10:00:00.125-04:00"
                        },
                        "orientation": "portrait"
                    }
                },
                "test": true,
                "locale": "cs_CZ",
                "module_type_id": 16,
                "redirect_url": "https://diagnostics.dap-services.com?custom_id=1&param1=dap",
                "forwarded_params": "user_id=11111&move=true",
                "exit_url": "https://diagnostics.dap-services.com?custom_id=1&param1=dap",
                "exit_url_label": "Dostat se na web",
                "redirect_params": [
                    "id",
                    "hash"
                ],
                "begin_time": "2013-07-01T10:00:00.125-04:00",
                "rotation_angle": 90,
                "rotation_count": "4",
                "display_progressbar": true,
                "contact": {
                    "email": "info@firma.cz",
                    "phone": "3349988"
                },
                "collector" :"model3",
                "scan_module": [
                    {
                        "object_id": 1,
                        "object_type": "COLOR",
                        "order": 1
                    },
                    {
                        "object_id": 21266,
                        "object_type": "WORD",
                        "object_label": "Já",
                        "order": 2
                    },
                    {
                        "object_id": 21269,
                        "object_type": "WORD",
                        "object_label": "Hladím se",
                        "order": 3
                    },
                    {
                        "object_id": 21277,
                        "object_type": "WORD",
                        "object_label": "Moje bolest",
                        "order": 6
                    },
                    {
                        "object_id": 2,
                        "object_type": "COLOR",
                        "order": 7
                    }
                ]
            }
            
    + Schema
    
            {
                "title": "scan_configuration",
                "type": "object",
                "properties": {
                    "client_data": {
                        "type": "object",
                        "minProperties": 1,
                        "allOf": [
                            {
                                "$ref": "#/definitions/client_data"
                            }
                        ]
                    },
                    "collector": {
                        "type": "string"
                    },
                    "test": {
                        "type": "boolean"
                    },
                    "locale": {
                        "type": "string",
                        "minLength": 1
                    },
                    "custom_logo_uri": {
                        "anyOf": [
                            {
                                "format": "uri"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "exit_url": {
                        "anyOf": [
                            {
                                "format": "uri"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "exit_url_label": {
                        "type": "string"
                    },
                    "redirect_url": {
                        "anyOf": [
                            {
                                "format": "uri"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "redirect_params": {
                        "type": "array"
                    },
                    "begin_time": {
                        "type": "string"
                    },
                    "angle": {
                        "type": "number"
                    },
                    "count": {
                        "type": "string"
                    },
                    "display_progressbar": {
                        "type": "boolean"
                    },
                    "scan_module": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "object_id",
                                "object_type"
                            ],
                            "properties": {
                                "object_id": {
                                    "type": "integer"
                                },
                                "object_type": {
                                    "type": "string",
                                    "minLength": 1
                                }
                            },
                            "anyOf": [
                                {
                                    "$ref": "#/definitions/word"
                                },
                                {
                                    "$ref": "#/definitions/color"
                                }
                            ]
                        },
                        "minItems": 1
                    }
                },
                "required": [
                    "scan_id",
                    "locale",
                    "begin_time",
                    "client_data"
                ],
                "definitions": {
                    "word": {
                        "type": "object",
                        "required": [
                            "object_label"
                        ],
                        "properties": {
                            "object_type": {
                                "type": "string",
                                "enum": [
                                    "WORD"
                                ],
                                "minLength": 1
                            },
                            "object_label": {
                                "type": "string",
                                "minLength": 1
                            }
                        }
                    },
                    "color": {
                        "type": "object",
                        "properties": {
                            "object_type": {
                                "type": "string",
                                "enum": [
                                    "COLOR"
                                ],
                                "minLength": 1
                            }
                        }
                    },
                    "client_data": {
                        "type": "object",
                        "required": [
                            "8",
                            "10"
                        ],
                        "properties": {
                            "8": {
                                "type": "string",
                                "anyOf": [
                                    {
                                        "pattern": "^[Ff][Ee][Mm][Aa][Ll][Ee]$"
                                    },
                                    {
                                        "pattern": "^[Mm][Aa][Ll][Ee]$"
                                    }
                                ]
                            },
                            "10": {
                                "type": "integer",
                                "maximum": 150
                            }
                        }
                    }
                }
            }

    
+ Response 200 (application/json)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "uuid": "5b293c49-482d-45dc-8acb-a2afa64240ee"
            }
            
+ Response 400 (application/json)

    + Headers
    
            Access-Control-Allow-Origin: *

    + Body

            {
                "status": "error",
                "message": "Request json is not valid according json schema.",
            }

+ Response 500 (application/json)

    + Headers
    
            Access-Control-Allow-Origin: *

    + Body

            {
                "status": "error",
                "message": "An error occured by internal server error.",
            }
            
## Get configuration of diagnostics [/diagnostics?uuid={uuid}]

Returns configuration of diagnostics json according identificator uuid. Will load from filesystem.

### Get configuration of diagnostics [GET]

+ Request id

    + Headers

            Accept: application/json
    
    + Parameters
    
        + uuid: `5b293c49-482d-45dc-8acb-a2afa64240ee` (string, required) - UUID of a diagnostic configuration.

+ Request JSON (application/json)

    + Body

            {
                "uuid": "5b293c49-482d-45dc-8acb-a2afa64240ee"
            }
            
        
+ Response 200 (application/json)

    + Headers

            Access-Control-Allow-Origin: *
            
    + Body  
    
            {
                "scan_id": "1234",
                "client_data": {
                    "8": "FEMALE",
                    "10": 25,
                    "13": "1. A",
                    "15": "cs",
                    "16": "CZ",
                    "30": {
                        "browser": {
                            "name": "Chrome",
                            "version": "58.0 .3029 .96"
                        },
                        "device": {
                            "model": null,
                            "type": "desktop",
                            "vendor": null
                        },
                        "OS": {
                            "name": "Windows",
                            "version": "7"
                        },
                        "screen": {
                            "width": "800px",
                            "height": "600px",
                            "availWidth": "800px",
                            "availHeight": "600px",
                            "colorDepth": "23 bpp"
                        },
                        "viewport": {
                            "innerWidth": "800px",
                            "innerHeight": "600px",
                            "outerWidth": "600px",
                            "outerHeight": "800px",
                            "clientWidth": "800px",
                            "clientHeight": "600px"
                        },
                        "language": "cs",
                        "user_agent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.96 Safari/537.36",
                        "touch_support": false,
                        "geolocation": {
                            "latitude": 49,
                            "longitude": 18,
                            "accuracy": 2323,
                            "timestamp": "2013-07-01T10:00:00.125-04:00"
                        },
                        "orientation": "portrait"
                    }
                },
                "test": true,
                "locale": "cs_CZ",
                "module_type_id": 16,
                "redirect_url": "https://diagnostics.dap-services.com?custom_id=1&param1=dap",
                "forwarded_params": "user_id=11111&move=true",
                "exit_url": "https://diagnostics.dap-services.com?custom_id=1&param1=dap",
                "exit_url_label": "Dostat se na web",
                "redirect_params": [
                    "id",
                    "hash"
                ],
                "begin_time": "2013-07-01T10:00:00.125-04:00",
                "rotation_angle": 90,
                "rotation_count": "4",
                "display_progressbar": true,
                "contact": {
                    "email": "info@firma.cz",
                    "phone": "3349988"
                },
                "collector" :"model3",
                "scan_module": [
                    {
                        "object_id": 1,
                        "object_type": "COLOR",
                        "order": 1
                    },
                    {
                        "object_id": 21266,
                        "object_type": "WORD",
                        "object_label": "Já",
                        "order": 2
                    },
                    {
                        "object_id": 21269,
                        "object_type": "WORD",
                        "object_label": "Hladím se",
                        "order": 3
                    },
                    {
                        "object_id": 21277,
                        "object_type": "WORD",
                        "object_label": "Moje bolest",
                        "order": 6
                    },
                    {
                        "object_id": 2,
                        "object_type": "COLOR",
                        "order": 7
                    }
                ]
            }
            
+ Response 400 (application/json)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "message": "Configuration of diagnostics was not found in filesystem.",
                "uuid": "5b293c49-482d-45dc-8acb-a2afa64240ee"
            }
            
## Save error configuration of diagnostics [/diagnostics/error]

### Save erorr configuration of diagnostics [POST]

For saving error of configuration use JSON format.

**JSON Request description**
+ **uuid** (String) - (required) uuid of saving diagnostic in api
+ **json** (String) - (required) Not valid json 
+ **error_message** (String) - (required) Error mesage with not valid parameters in json

+ Request JSON (application/json)
    
    + Headers

            Accept: application/json

    + Body  
    
            {
                "uuid": "432aa25f-73af-4389-9b70-c2f9b9f579d9",
                "json": "{\"nevalidni\":\"json\"}",
                "error_message": "Pole v jsonu je nevalidni"
            }
    
+ Response 200 (application/json)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "status": "success"
            }
            
+ Response 400 (application/json)

    + Headers
    
            Access-Control-Allow-Origin: *

    + Body

            {
                "status": "error",
                "message": "Configuration of diagnostics with error request content is not in valid JSON format."
            }
            
+ Response 500 (application/json)

    + Headers
    
            Access-Control-Allow-Origin: *

    + Body

            {
                "status": "error",
                "message": "An error occurred while saving configuration of diagnostics with error."
            }
            
## Send diagnostics [/diagnostics/collector]

Send diagnostics to collector and move configuration of diagnostic to success folder.

### Send diagnostics to collector and move to success folder[POST]

For sending scan output to collector use JSON format.

**JSON Request description**

- this same as [Collector](#collector)

**Condition is that client_data has to contains uuid! (id=29)**


+ Request JSON (application/json)
    
    + Headers

            Accept: application/json

    
+ Response 200 (application/json)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "status": "success"
            }
            
+ Response 400 (application/json)

    + Headers
    
            Access-Control-Allow-Origin: *

    + Body

            {
                "status": "error",
                "message": "Input request for save not sent diagnostics to collector is not in valid JSON format."
            }
            
+ Response 500 (application/json)

    + Headers
    
            Access-Control-Allow-Origin: *

    + Body

            {
                "status": "error",
                "message": "An error occurred while saving diagnostics for collector to filesystem."
            }

## Check if diagnostics was sent [/diagnostics/sent?uuid={uuid}]

It checks if diagnostics was sent to collector.

This means, that configuration of diagnostics was moved to success folder.

### Get if diagnostics was sent [GET]

+ Request id

    + Headers

            Accept: application/json
    
    + Parameters
    
        + uuid: `5b293c49-482d-45dc-8acb-a2afa64240ee` (string, required) - UUID of a diagnostic configuration.

+ Request JSON (application/json)

    + Body

            {
                "uuid": "5b293c49-482d-45dc-8acb-a2afa64240ee"
            }
            
        
+ Response 200 (application/json)

    + Headers

            Access-Control-Allow-Origin: *
            
    + Body  
    
            {
              "status": "success"
            }
            
+ Response 400 (application/json)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "status": "notFound",
                "configuration": {
                    "time": "2018-01-19_14:36:38",
                    "collector": "model3",
                    "collectorUrl": "http://localhost:8080/2/collector/get"
                }
            }


# Group Parameters

## Parameter computing [/parameters/compute]

### POST

#### Request description

- scan_data_ids - person ids (diagnostics ids). Type `ARRAY`, id type is `NUMBER` (required).
- parameters_ids - parameter ids. Type `ARRAY`, id type is `NUMBER` (required).
- scan_objects_ids - scan object ids. Type `ARRAY`, id type is `NUMBER`.

#### Response description

- this resource returns `OBJECT` (key: value). Parameter ids are keys, values can be `NUMBER`, `STRING`, `OBJECT`.

+ Request (application/json)

    + Headers

            Authorization: AuthSub token="token"
            Accept: application/json

    + Body

            {"parameters_ids": [1], "scan_data_ids": [1]}

+ Response 200 (application/json)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {"1": 70.3, "2": {"1": 30, "2": 91}}

+ Response 400 (Bad Request)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "error": {
                    "message": "Error message.",
                    "error_code": "error.code.badRequest"
                }
            }

+ Response 401 (Unauthorized)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "error": {
                    "message": "Authentication error message.",
                    "error_code": "error.code.authorization"
                }
            }

## Getting parameters [/parameters]

### POST

#### Request description

- type - filter for table. Type Enum [FORMULA, VALUE, null]. if null return all parameters.

#### Response description

- this resource returns `ARRAY` of `OBJECT`. `OBJECT` contain id, name, description and type of parameter. Type determine what table will be used for find parameters.

+ Request (application/json)

    + Headers

            Authorization: AuthSub token="token"
            Accept: application/json

    + Body

            {"type": "FORMULA"}

+ Response 200 (application/json)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            [
              {
                "id": 1,
                "name": "Blonde - Celková efektivita učení 0 - 100",
                "description": "Celková efektivita učení",
                "type": "VALUE"
              },
              {
                "id": 2,
                "name": "Blonde - Celkové ohrožení rizikovými jevy - 0 - 100",
                "description": "Celkové ohrožení rizikovými jevy",
                "type": "VALUE"
              },
              {
                "id": 3,
                "name": "Blonde - Vliv návaznosti na další studium na efektivitu učení - 0 - 100",
                "description": "Korelace spontálního a formálního učení s faktorem návaznosti na další studium",
                "type": "VALUE"
              },
              {
                "id": 1,
                "name": "Celková efektivita učení",
                "description": "Korelace sponntáního a formálního učení",
                "type": "FORMULA"
              },
              {
                "id": 2,
                "name": "Celkové ohrožení rizikovými jevy",
                "description": "Celkové ohrožení rizikovými jevy",
                "type": "FORMULA"
              },
              {
                "id": 3,
                "name": "Vliv návaznosti na další studium na efektivitu učení",
                "description": "Korelace sponntáního a formálního učení s faktorem návaznosti na další studium",
                "type": "FORMULA"
              }
            ]

+ Response 400 (Bad Request)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "error": {
                    "message": "Error message.",
                    "error_code": "error.code.badRequest"
                }
            }

+ Response 401 (Unauthorized)

    + Headers

            Access-Control-Allow-Origin: *

    + Body

            {
                "error": {
                    "message": "Authentication error message.",
                    "error_code": "error.code.authorization"
                }
            }